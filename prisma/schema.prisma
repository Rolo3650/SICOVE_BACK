generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  teacher
  admin
}

enum UserStatus {
  active
  inactive
  pending
}

enum VehicleType {
  SUV
  Sedan
  PickUp
}

enum FuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
}

enum TransmissionType {
  Manual
  Automatic
  CVT
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName  String
  lastName   String
  email      String     @unique
  password   String
  phone      Int
  birthday   DateTime
  role       UserRole   @default(student)
  userStatus UserStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)
}

model Brand {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  brand       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Model Model[]
}

model Model {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  model       String
  description String?

  brandId String @db.ObjectId
  brand   Brand  @relation(fields: [brandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Version Version[]
}

model Version {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  version          String
  vehicleType      VehicleType
  fuelType         FuelType
  transmissionType TransmissionType
  description      String?
  engineSize       Float
  year             DateTime         @default(now())

  modelId String @db.ObjectId
  model   Model  @relation(fields: [modelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Vehicle Vehicle[]
}

model Vehicle {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  licencePlate String?
  VIN          String?
  color        String
  mileage      Int
  engineNumber String
  chasisNumber String

  versionId String  @db.ObjectId
  version   Version @relation(fields: [versionId], references: [id])

  branchId String?  @db.ObjectId
  branch   Branch? @relation(fields: [branchId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)
}

model Country {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  country String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  State State[]
}

model State {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  state     String
  countryId String  @db.ObjectId
  country   Country @relation(fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Municipality Municipality[]
}

model Municipality {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  municipality String
  stateId      String @db.ObjectId
  state        State  @relation(fields: [stateId], references: [id])

  City City[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)
}

model City {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  city           String
  municipalityId String       @db.ObjectId
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Branch Branch[]
}

model Branch {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name            String
  address         String
  locationUrl     String?
  vehicleCapacity Int
  trucksCapacity  Int

  cityId String @db.ObjectId
  city   City   @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  vehicles Vehicle[]
}
