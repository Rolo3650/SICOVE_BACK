generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
}

enum UserStatus {
  active
  inactive
  pending
}

enum VehicleType {
  SUV
  Sedan
  PickUp
}

enum FuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
}

enum TransmissionType {
  Manual
  CVT
}

enum VehicleStatus {
  new
  semiNew
  internalUse
}

enum OwnerType {
  natural
  legal
}

enum VerificiationColor {
  red
  blue
  green
  yellow
  pink
}

enum RoadEntity {
  municipal
  state
  federal
}

enum RoadType {
  dirtRoad
  paved
  pavimented
}

enum CirculationType {
  public
  private
  shared
}

enum CheckType {
  In
  Out
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName  String
  lastName   String
  email      String     @unique
  password   String
  phone      Int
  birthday   DateTime
  role       UserRole   @default(admin)
  userStatus UserStatus @default(pending)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt()
  status             Boolean              @default(true)
  branchRegistration BranchRegistration[]
}

model Brand {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  brand       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  subBrand SubBrand[]
}

model SubBrand {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  subBrand    String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  brandId String @db.ObjectId
  brand   Brand  @relation(fields: [brandId], references: [id])

  model Model[]
}

model Model {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  model       String
  description String?

  subBrandId String   @db.ObjectId
  subBrand   SubBrand @relation(fields: [subBrandId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  version Version[]
}

model Version {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  version          String
  vehicleType      VehicleType
  fuelType         FuelType
  transmissionType TransmissionType
  doors            Int
  axis             Int
  description      String?
  engineSize       Float
  year             DateTime         @default(now())

  modelId String @db.ObjectId
  model   Model  @relation(fields: [modelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  vehicle Vehicle[]
}

model Vehicle {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  VIN           String?
  color         String
  mileage       Int
  engineNumber  String
  chasisNumber  String
  vehicleStatus VehicleStatus @default(new)
  size          Int           @default(1)

  registered         Boolean             @default(false)
  circulationCard    String?
  circulationEndDate DateTime?
  licencePlate       String?
  verificationNumber Int?
  verificationColor  VerificiationColor?

  ownerName   String?
  ownerType   OwnerType?
  ownerPhone  String?
  observation String?

  versionId String  @db.ObjectId
  version   Version @relation(fields: [versionId], references: [id])

  branchSectionId String?        @db.ObjectId
  branchSection   BranchSection? @relation(fields: [branchSectionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  customRegistration    CustomRegistration[]
  insuranceRegistration InsuranceRegistration[]
  verification          Verification[]
  branchRegistration    BranchRegistration[]
}

model CustomRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  folio String
  date  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

model InsuranceRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  policyNumber   String
  company        String
  startDate      DateTime
  endDate        DateTime
  policyHolder   String
  policyCoverage String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

model Verification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  verificationDate DateTime @default(now())
  verificationType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
}

model Country {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  country String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  state State[]
}

model State {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  state     String
  countryId String  @db.ObjectId
  country   Country @relation(fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  municipality Municipality[]
}

model Municipality {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  municipality String
  stateId      String @db.ObjectId
  state        State  @relation(fields: [stateId], references: [id])

  colony Colony[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  Road Road[]
}

model Colony {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  colony         String
  municipalityId String       @db.ObjectId
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  branch Branch[]
}

model Road {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  roadName        String
  roadType        RoadType
  roadEntity      RoadEntity
  circulationType CirculationType

  municipalityId String       @db.ObjectId
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  branch Branch[]
}

model Branch {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key         String
  name        String
  locationUrl String?

  address String?
  number  String?

  kilometer   String?
  origin      String?
  destination String?

  roadId String? @db.ObjectId
  road   Road?   @relation(fields: [roadId], references: [id])

  colonyId String @db.ObjectId
  colony   Colony @relation(fields: [colonyId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt()
  status        Boolean         @default(true)
  branchSection BranchSection[]
}

model BranchSection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  capacity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)

  branchId String @db.ObjectId
  branch   Branch @relation(fields: [branchId], references: [id])

  vehicle            Vehicle[]
  branchRegistration BranchRegistration[]
}

model BranchRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  checkType CheckType

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  branchSectionId String        @db.ObjectId
  branchSection   BranchSection @relation(fields: [branchSectionId], references: [id])

  vehicleId String  @db.ObjectId
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    Boolean  @default(true)
}
